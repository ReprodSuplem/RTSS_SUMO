var search_data = {"index":{"searchIndex":["doc_analyzedemandlog","doc_filtersavstaginosm","doc_runsavsimmixture","doc_runsavsimrandom","geo2d","vector","object","sav","demandloganalyzer","geofeature","savallocator","savallocatorrandom","savallocatorseqopt","savbase","savdemand","savdemandfactory","savdemandfactorydirected","savdemandfactorymixture","savdemandfactoryrandom","savdemandfactoryuseragent","savreporter","tentativearray","trip","util","viapoint","sumo","sumoexception","sumomanager","sumomap","coordsystem","edge","junction","lane","traci","poi","poimanager","vehicle","location","vehiclemanager","util","namedidentry","namedidtable","sumoutil_doc_jp","tc_foo","tc_savbase","tc_savtrip","tc_savutil","tc_savvehicle","tc_sumomanger","tc_traciclient","tc_vehicle","tc_vehiclemanager","time","[]()","__cyclecheckvehicles_notgood()","add()","add()","addaspoi()","addbody()","addextra()","addextra()","addnewsavvehicle()","addsharedwith()","allocate()","allocate()","allocate()","allocatedemandtosav()","allocateinit()","allocateone()","allocateviapoints()","arrivedat()","averagemanhattandistance()","bbox()","buildrtrees()","cancel()","checkpermissionfor()","checkpermissionfor()","checkvehiclealiveordrop()","clearpoi()","comaddvehicle()","comaddvehiclebyinitargs()","comparescore()","convertsectosimunits()","convertsimunitstosec()","currenttimeinstring()","cyclecheckprocessinglist()","disposemapcomponents()","dumptofile()","dumptofile()","each()","eachvehicle()","ensuredir()","ensuregeoobj()","ensuretraciclient()","ensuretraciclient()","ensuretrip()","entryclass()","estimatedistance()","estimatedistancebetweenpos_averagemanhattan()","estimatedistancebody()","estimatetime()","estimatetimefornewroute()","estimatetimefornewroutebody()","fetchalldynamic()","fetchallstatic()","fetchedgelist()","fetchlanelength()","fetchlength()","fetchlocation()","fetchposition()","fetchrouteindex()","fetchsimulationtimeinsec()","fetchspeed()","fetchstopstate()","fetchtype()","fetchvehicleidlist()","fetchwidth()","findnearestedgefrom()","findnearestedgefromlonlat()","findnearestjunctionfrom()","findnearestjunctionfromlonlat()","findnearestlanefrom()","findnearestlanefromlonlat()","findnearestonedgefrom()","findnearestonedgefromlonlat()","findnearestonlanefrom()","findnearestonlanefromlonlat()","firstlane()","footpointfrom()","footpointfrom()","footpointspanfrom()","footpointspanfrom()","formareashape()","genshapejson()","generatelaneid()","geoobject()","geoobject()","geoobject()","getattrval()","getbyid()","getbyid()","getbyname()","getbyname()","getbynameinconstant()","getbynameinconstant()","getcolorvalue()","getconnectededgeids()","getconnectededges()","getdropofftime()","getedge()","getedgeforuturn()","getendpoint()","getendpoint()","getgeofeature()","getlocation()","getoppositeedge()","getpickuptime()","getpointforuturn()","getspan()","getspan()","getstartpoint()","getstartpoint()","getstate()","gettripplannedtime()","gettriptime()","hasdemand()","help()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","inspect_original()","isaheadof()","isalive()","isarrived()","iscloseenough()","isdropoff()","isdummy()","isfinished?()","isonroad?()","isoppositeedge()","ispickup()","isstopped()","istcpportinuse()","jointoonboardlist()","kthindex()","laneid()","length()","length()","letfinished()","letrunning()","letskipped()","loadjsonfile()","loadxmlfile()","logging()","logging()","logging()","logging()","logging()","makereportforonesav()","makereportinjsonlist()","map()","npoi()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","newdemand()","newdemand()","newdemand()","newdemandlistforcycle()","newdemandlistforcycle()","newdemandlistforcycle()","newdemandlistforcycle()","newdemandlistforcycle()","newvehicle()","novelpoiid()","novelvehicleid()","nth()","octaldump()","originalid()","outputdemandloginjson()","outputresult()","postsetupafteradd()","preparelog()","pushallocateddemand()","pushcancelleddemand()","registernewdemandlist()","renewid()","report()","restorefromfile()","resubmitaddvehicle()","run()","run()","savejsonfile()","scandisttimespeed()","scandropoffmargin()","scanfreetcpport()","scanjson()","scanjson()","scanjson()","scanjson()","scanjson()","scanlogfile()","scanloginit()","scanlogjson()","scanlogstream()","scanshapejson()","scansharecount()","scanxml()","scanxml()","scanxml()","scanxml()","setlogger()","settraciclient()","settraciclient()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setupfactorylist()","setupinnerfactory()","setupmap()","setuppassengerlist()","setuppoi()","setuppoimanager()","setuprangebox()","setuprangebox()","setuptraciclientwithserver()","setupuseragent()","setupvehiclemanager()","shape()","shortname()","shouldbeexcluded()","size()","speed()","storetojson()","submitadd()","submitaddpoi()","submitaddvehicle()","submitall()","submitchangetarget()","submitcolor()","submitcolor()","submitmoveto()","submitnewpoi()","submitnewroute()","submitnewvehicle()","submitnewvehicle()","submitremove()","submitremove()","submitremovepoi()","submitremovevehicle()","submitresume()","submitslowdown()","submitstop()","submitstopatedge()","test_a()","test_a()","test_a()","test_a()","test_a()","test_a()","test_a()","test_a()","test_a()","test_b()","test_b()","test_b()","test_c()","test_c()","test_d()","test_d()","test_e()","test_e()","test_f()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","tojson()","to_a()","to_s()","tracicom_add()","tracicom_remove()","transformlonlat2xy()","transformlonlat2xy()","transformxy2lonlat()","transformxy2lonlat()","updateplanneddropofftime()","updateplannedpickuptime()","updatetripplannedtime()","updatevehicletablewhole()","validspan()","vehiclelist()","vehicletable()","waittcpportisfree()","waittcpportisready()"],"longSearchIndex":["doc_analyzedemandlog","doc_filtersavstaginosm","doc_runsavsimmixture","doc_runsavsimrandom","geo2d","geo2d::vector","object","sav","sav::demandloganalyzer","sav::geofeature","sav::savallocator","sav::savallocatorrandom","sav::savallocatorseqopt","sav::savbase","sav::savdemand","sav::savdemandfactory","sav::savdemandfactorydirected","sav::savdemandfactorymixture","sav::savdemandfactoryrandom","sav::savdemandfactoryuseragent","sav::savreporter","sav::tentativearray","sav::trip","sav::util","sav::viapoint","sumo","sumo::sumoexception","sumo::sumomanager","sumo::sumomap","sumo::sumomap::coordsystem","sumo::sumomap::edge","sumo::sumomap::junction","sumo::sumomap::lane","sumo::traci","sumo::traci::poi","sumo::traci::poimanager","sumo::traci::vehicle","sumo::traci::vehicle::location","sumo::traci::vehiclemanager","sumo::util","sumo::util::namedidentry","sumo::util::namedidtable","sumoutil_doc_jp","tc_foo","tc_savbase","tc_savtrip","tc_savutil","tc_savvehicle","tc_sumomanger","tc_traciclient","tc_vehicle","tc_vehiclemanager","time","sav::tentativearray#[]()","sumo::sumomanager#__cyclecheckvehicles_notgood()","sumo::util::namedidtable#add()","sumo::util::namedidtable::add()","sav::savbase#addaspoi()","sumo::util::namedidtable#addbody()","sumo::util::namedidtable#addextra()","sumo::util::namedidtable::addextra()","sav::savbase#addnewsavvehicle()","sav::savdemand#addsharedwith()","sav::savallocator#allocate()","sav::savallocatorrandom#allocate()","sav::savallocatorseqopt#allocate()","sav::savallocator#allocatedemandtosav()","sav::savallocator#allocateinit()","sav::savallocatorseqopt#allocateone()","sav::savdemand#allocateviapoints()","sav::viapoint#arrivedat()","sav::util#averagemanhattandistance()","sumo::sumomap#bbox()","sumo::sumomap#buildrtrees()","sav::savdemand#cancel()","sumo::sumomap::edge#checkpermissionfor()","sumo::sumomap::lane#checkpermissionfor()","sumo::traci::vehiclemanager#checkvehiclealiveordrop()","sav::viapoint#clearpoi()","sumo::traci::vehicle#comaddvehicle()","sumo::traci::vehicle#comaddvehiclebyinitargs()","sav::savallocatorseqopt#comparescore()","sumo::util#convertsectosimunits()","sumo::util#convertsimunitstosec()","sumo::sumomanager#currenttimeinstring()","sav::savdemandfactory#cyclecheckprocessinglist()","sumo::sumomap#disposemapcomponents()","sumo::sumomap#dumptofile()","sumo::sumomap::dumptofile()","sav::tentativearray#each()","sumo::sumomanager#eachvehicle()","sav::util#ensuredir()","sav::trip#ensuregeoobj()","sumo::traci::poi#ensuretraciclient()","sumo::traci::vehicle#ensuretraciclient()","sav::trip::ensuretrip()","sumo::util::namedidtable#entryclass()","sav::savallocator#estimatedistance()","sav::savallocator#estimatedistancebetweenpos_averagemanhattan()","sav::savallocator#estimatedistancebody()","sav::savallocator#estimatetime()","sav::savallocator#estimatetimefornewroute()","sav::savallocator#estimatetimefornewroutebody()","sumo::traci::vehicle#fetchalldynamic()","sumo::traci::vehicle#fetchallstatic()","sumo::traci::vehicle#fetchedgelist()","sumo::traci::vehiclemanager#fetchlanelength()","sumo::traci::vehicle#fetchlength()","sumo::traci::vehicle#fetchlocation()","sumo::traci::vehicle#fetchposition()","sumo::traci::vehicle#fetchrouteindex()","sumo::sumomanager#fetchsimulationtimeinsec()","sumo::traci::vehicle#fetchspeed()","sumo::traci::vehicle#fetchstopstate()","sumo::traci::vehicle#fetchtype()","sumo::traci::vehiclemanager#fetchvehicleidlist()","sumo::traci::vehicle#fetchwidth()","sumo::sumomap#findnearestedgefrom()","sumo::sumomap#findnearestedgefromlonlat()","sumo::sumomap#findnearestjunctionfrom()","sumo::sumomap#findnearestjunctionfromlonlat()","sumo::sumomap#findnearestlanefrom()","sumo::sumomap#findnearestlanefromlonlat()","sumo::sumomap#findnearestonedgefrom()","sumo::sumomap#findnearestonedgefromlonlat()","sumo::sumomap#findnearestonlanefrom()","sumo::sumomap#findnearestonlanefromlonlat()","sumo::sumomap::edge#firstlane()","sumo::sumomap::edge#footpointfrom()","sumo::sumomap::lane#footpointfrom()","sumo::sumomap::edge#footpointspanfrom()","sumo::sumomap::lane#footpointspanfrom()","sav::savdemandfactorydirected#formareashape()","sumo::sumomap::lane#genshapejson()","sumo::traci::vehiclemanager#generatelaneid()","sumo::sumomap::edge#geoobject()","sumo::sumomap::junction#geoobject()","sumo::sumomap::lane#geoobject()","sumo::sumomap::getattrval()","sumo::util::namedidtable#getbyid()","sumo::util::namedidtable::getbyid()","sumo::util::namedidtable#getbyname()","sumo::util::namedidtable::getbyname()","sumo::util::namedidtable#getbynameinconstant()","sumo::util::namedidtable::getbynameinconstant()","sumo::util#getcolorvalue()","sumo::sumomap::edge#getconnectededgeids()","sumo::sumomap::edge#getconnectededges()","sav::savdemand#getdropofftime()","sav::viapoint#getedge()","sumo::sumomap::edge#getedgeforuturn()","sumo::sumomap::edge#getendpoint()","sumo::sumomap::lane#getendpoint()","sav::savdemandfactorydirected#getgeofeature()","sav::viapoint#getlocation()","sumo::sumomap::edge#getoppositeedge()","sav::savdemand#getpickuptime()","sumo::sumomap::edge#getpointforuturn()","sav::savbase#getspan()","sav::viapoint#getspan()","sumo::sumomap::edge#getstartpoint()","sumo::sumomap::lane#getstartpoint()","sav::savdemand#getstate()","sav::savdemand#gettripplannedtime()","sav::savdemand#gettriptime()","sav::viapoint#hasdemand()","object#help()","sav::savallocator#inspect()","sav::savdemand#inspect()","sav::savdemandfactory#inspect()","sav::savreporter#inspect()","sav::viapoint#inspect()","sumo::sumomap#inspect()","sumo::sumomap::edge#inspect()","sumo::sumomap::lane#inspect()","sumo::traci::poi#inspect()","sumo::traci::vehicle#inspect()","sav::savallocator#inspect_original()","sav::savdemand#inspect_original()","sav::savdemandfactory#inspect_original()","sav::savreporter#inspect_original()","sav::viapoint#inspect_original()","sumo::sumomap#inspect_original()","sumo::sumomap::edge#inspect_original()","sumo::sumomap::lane#inspect_original()","sumo::traci::poi#inspect_original()","sumo::traci::vehicle#inspect_original()","sumo::traci::vehicle::location#isaheadof()","sumo::traci::vehicle#isalive()","sav::viapoint#isarrived()","sumo::traci::vehicle::location#iscloseenough()","sav::viapoint#isdropoff()","sav::viapoint#isdummy()","sumo::traci::vehicle#isfinished?()","sumo::traci::vehicle#isonroad?()","sumo::sumomap::edge#isoppositeedge()","sav::viapoint#ispickup()","sumo::traci::vehicle#isstopped()","sumo::util#istcpportinuse()","sav::savdemand#jointoonboardlist()","sav::tentativearray#kthindex()","sumo::traci::vehicle::location#laneid()","sav::tentativearray#length()","sumo::sumomap::edge#length()","sumo::traci::vehicle#letfinished()","sumo::traci::vehicle#letrunning()","sav::viapoint#letskipped()","sumo::sumomap#loadjsonfile()","sumo::sumomap#loadxmlfile()","sav::savallocator#logging()","sav::savreporter#logging()","sumo::sumomanager#logging()","sumo::sumomap#logging()","sumo::traci::vehicle#logging()","sav::savreporter#makereportforonesav()","sav::savreporter#makereportinjsonlist()","sav::tentativearray#map()","sumo::traci::poimanager#npoi()","sav::demandloganalyzer::new()","sav::savallocator::new()","sav::savbase::new()","sav::savdemand::new()","sav::savdemandfactory::new()","sav::savreporter::new()","sav::tentativearray::new()","sav::trip::new()","sav::viapoint::new()","sumo::sumoexception::new()","sumo::sumomanager::new()","sumo::sumomap::new()","sumo::sumomap::coordsystem::new()","sumo::sumomap::edge::new()","sumo::sumomap::junction::new()","sumo::sumomap::lane::new()","sumo::traci::poi::new()","sumo::traci::poimanager::new()","sumo::traci::vehicle::new()","sumo::traci::vehicle::location::new()","sumo::traci::vehiclemanager::new()","sumo::util::namedidentry::new()","sumo::util::namedidtable::new()","sav::savdemandfactory#newdemand()","sav::savdemandfactorydirected#newdemand()","sav::savdemandfactoryrandom#newdemand()","sav::savdemandfactory#newdemandlistforcycle()","sav::savdemandfactorydirected#newdemandlistforcycle()","sav::savdemandfactorymixture#newdemandlistforcycle()","sav::savdemandfactoryrandom#newdemandlistforcycle()","sav::savdemandfactoryuseragent#newdemandlistforcycle()","sumo::traci::vehiclemanager#newvehicle()","sumo::traci::poimanager#novelpoiid()","sumo::traci::vehiclemanager#novelvehicleid()","sav::tentativearray#nth()","sumo::util#octaldump()","sumo::sumomap::edge#originalid()","sav::savdemandfactory#outputdemandloginjson()","sav::demandloganalyzer#outputresult()","sumo::traci::vehicle#postsetupafteradd()","sav::savdemandfactory#preparelog()","sav::savallocator#pushallocateddemand()","sav::savallocator#pushcancelleddemand()","sav::savdemandfactory#registernewdemandlist()","sumo::traci::vehicle#renewid()","sav::savreporter#report()","sumo::sumomap::restorefromfile()","sumo::traci::vehicle#resubmitaddvehicle()","sav::demandloganalyzer#run()","sumo::sumomanager#run()","sumo::sumomap#savejsonfile()","sav::demandloganalyzer#scandisttimespeed()","sav::demandloganalyzer#scandropoffmargin()","sumo::util#scanfreetcpport()","sumo::sumomap#scanjson()","sumo::sumomap::coordsystem#scanjson()","sumo::sumomap::edge#scanjson()","sumo::sumomap::junction#scanjson()","sumo::sumomap::lane#scanjson()","sav::demandloganalyzer#scanlogfile()","sav::demandloganalyzer#scanloginit()","sav::demandloganalyzer#scanlogjson()","sav::demandloganalyzer#scanlogstream()","sumo::sumomap::lane#scanshapejson()","sav::demandloganalyzer#scansharecount()","sumo::sumomap::coordsystem#scanxml()","sumo::sumomap::edge#scanxml()","sumo::sumomap::junction#scanxml()","sumo::sumomap::lane#scanxml()","sumo::sumomap#setlogger()","sumo::traci::poimanager#settraciclient()","sumo::traci::vehiclemanager#settraciclient()","sav::demandloganalyzer#setup()","sav::savallocator#setup()","sav::savallocatorrandom#setup()","sav::savallocatorseqopt#setup()","sav::savdemandfactory#setup()","sav::savdemandfactorydirected#setup()","sav::savdemandfactorymixture#setup()","sav::savdemandfactoryrandom#setup()","sav::savdemandfactoryuseragent#setup()","sav::savreporter#setup()","sumo::sumomanager#setup()","sumo::sumomap#setup()","sumo::traci::poi#setup()","sumo::traci::poimanager#setup()","sumo::traci::vehicle#setup()","sumo::traci::vehiclemanager#setup()","tc_foo#setup()","tc_savbase#setup()","tc_savtrip#setup()","tc_savutil#setup()","tc_savvehicle#setup()","tc_sumomanger#setup()","tc_traciclient#setup()","tc_vehicle#setup()","tc_vehiclemanager#setup()","sav::savdemandfactorymixture#setupfactorylist()","sav::savdemandfactoryuseragent#setupinnerfactory()","sumo::sumomanager#setupmap()","sav::savdemandfactoryrandom#setuppassengerlist()","sav::viapoint#setuppoi()","sumo::sumomanager#setuppoimanager()","sav::savdemandfactorydirected#setuprangebox()","sav::savdemandfactoryrandom#setuprangebox()","sumo::sumomanager#setuptraciclientwithserver()","sav::savdemandfactoryuseragent#setupuseragent()","sumo::sumomanager#setupvehiclemanager()","sumo::sumomap::edge#shape()","sumo::util::namedidentry#shortname()","sumo::sumomap::edge#shouldbeexcluded()","sav::tentativearray#size()","sumo::sumomap::edge#speed()","sav::util#storetojson()","sumo::traci::poi#submitadd()","sumo::traci::poimanager#submitaddpoi()","sumo::traci::vehicle#submitaddvehicle()","sumo::traci::vehicle#submitall()","sumo::traci::vehicle#submitchangetarget()","sumo::traci::poi#submitcolor()","sumo::traci::vehicle#submitcolor()","sumo::traci::vehicle#submitmoveto()","sumo::traci::poimanager#submitnewpoi()","sumo::traci::vehiclemanager#submitnewroute()","sumo::sumomanager#submitnewvehicle()","sumo::traci::vehiclemanager#submitnewvehicle()","sumo::traci::poi#submitremove()","sumo::traci::vehicle#submitremove()","sumo::traci::poimanager#submitremovepoi()","sumo::traci::vehiclemanager#submitremovevehicle()","sumo::traci::vehicle#submitresume()","sumo::traci::vehicle#submitslowdown()","sumo::traci::vehicle#submitstop()","sumo::traci::vehicle#submitstopatedge()","tc_foo#test_a()","tc_savbase#test_a()","tc_savtrip#test_a()","tc_savutil#test_a()","tc_savvehicle#test_a()","tc_sumomanger#test_a()","tc_traciclient#test_a()","tc_vehicle#test_a()","tc_vehiclemanager#test_a()","tc_foo#test_b()","tc_traciclient#test_b()","tc_vehiclemanager#test_b()","tc_foo#test_c()","tc_vehiclemanager#test_c()","tc_foo#test_d()","tc_vehiclemanager#test_d()","tc_foo#test_e()","tc_vehiclemanager#test_e()","tc_foo#test_f()","geo2d::vector#tojson()","sav::demandloganalyzer#tojson()","sav::savdemand#tojson()","sav::trip#tojson()","sav::util#tojson()","sav::viapoint#tojson()","sumo::sumomap#tojson()","sumo::sumomap::coordsystem#tojson()","sumo::sumomap::edge#tojson()","sumo::sumomap::junction#tojson()","sumo::sumomap::lane#tojson()","sav::tentativearray#to_a()","sumo::traci::poi#to_s()","sumo::traci::poi#tracicom_add()","sumo::traci::poi#tracicom_remove()","sumo::sumomap#transformlonlat2xy()","sumo::sumomap::coordsystem#transformlonlat2xy()","sumo::sumomap#transformxy2lonlat()","sumo::sumomap::coordsystem#transformxy2lonlat()","sav::savdemand#updateplanneddropofftime()","sav::savdemand#updateplannedpickuptime()","sav::savdemand#updatetripplannedtime()","sumo::traci::vehiclemanager#updatevehicletablewhole()","sumo::sumomap::edge#validspan()","sumo::sumomanager#vehiclelist()","sumo::sumomanager#vehicletable()","sumo::util#waittcpportisfree()","sumo::util#waittcpportisready()"],"info":[["Doc_analyzeDemandLog","","Doc_analyzeDemandLog.html","","<p>analyzeDemandLog\n<p><code>runSavSimRandom</code> のログを解析し、デマンドの処理の結果の統計を出力する。\n<p>概要\n"],["Doc_filterSavsTagInOsm","","Doc_filterSavsTagInOsm.html","","<p>filterSavsTagInOsm\n<p>OSM のマップデータを読み、そこに付与されたSAVS用のFeature(POIやZone)の情報の取得、\nあるいは、削除すべきwayのIDのリストをファイルに出力する。 …\n"],["Doc_runSavSimMixture","","Doc_runSavSimMixture.html","","<p>runSavSimMixture\n<p>指定された混合分布をデマンド発生分布として、SAVの運行シミュレーションを行う。\n<p>概要\n"],["Doc_runSavSimRandom","","Doc_runSavSimRandom.html","","<p>runSavSimRandom\n<p>一様ランダムなデマンドを仮定して、SAVの運行シミュレーションを行う。\n<p>概要\n"],["Geo2D","","Geo2D.html","",""],["Geo2D::Vector","","Geo2D/Vector.html","","<p>for Geo2D.\n"],["Object","","Object.html","",""],["Sav","","Sav.html","","<p>Sav module\n<p>Sav module\n<p>Sav module\n"],["Sav::DemandLogAnalyzer","","Sav/DemandLogAnalyzer.html","","<p>description of class Foo.\n"],["Sav::GeoFeature","","Sav/GeoFeature.html","",""],["Sav::SavAllocator","","Sav/SavAllocator.html","","<p>class for Sav Allocator\n"],["Sav::SavAllocatorRandom","","Sav/SavAllocatorRandom.html","","<p>class for Factory of SavDemand\n"],["Sav::SavAllocatorSeqOpt","","Sav/SavAllocatorSeqOpt.html","","<p>class for Allocator of SavDemand using sequentially optimal insertion\n"],["Sav::SavBase","","Sav/SavBase.html","","<p>class for SavBase\n"],["Sav::SavDemand","","Sav/SavDemand.html","","<p>SavDemand\n"],["Sav::SavDemandFactory","","Sav/SavDemandFactory.html","","<p>class for Factory of SavDemand\n"],["Sav::SavDemandFactoryDirected","","Sav/SavDemandFactoryDirected.html","","<p>class for Factory of SavDemand. The config (demandConfig) param should be\nin the following format:\n\n<pre>&lt;Config&gt; ...</pre>\n"],["Sav::SavDemandFactoryMixture","","Sav/SavDemandFactoryMixture.html","","<p>class for Factory of SavDemand. The config (demandConfig) param should be\nin the following format:\n\n<pre>&lt;ConfigList&gt; ...</pre>\n"],["Sav::SavDemandFactoryRandom","","Sav/SavDemandFactoryRandom.html","","<p>class for Factory of SavDemand\n"],["Sav::SavDemandFactoryUserAgent","","Sav/SavDemandFactoryUserAgent.html","","<p>class for Factory of SavDemand controlled by UserAgent. The config\n(demandConfig) param should be in …\n"],["Sav::SavReporter","","Sav/SavReporter.html","","<p>class for Sav Allocator\n"],["Sav::TentativeArray","","Sav/TentativeArray.html","","<p>tentative array for planning. If, the base array is [a, b, c, d], the\nindexList is [2, 3], and objextList …\n"],["Sav::Trip","","Sav/Trip.html","","<p>Trip\n"],["Sav::Util","","Sav/Util.html","","<p>Utility Module\n"],["Sav::ViaPoint","","Sav/ViaPoint.html","","<p>ViaPoint\n"],["Sumo","","Sumo.html","","<p>package for SUMO\n<p>package for SUMO\n<p>package for SUMO\n"],["Sumo::SumoException","","Sumo/SumoException.html","","<p>generic Sumo Exception class.\n"],["Sumo::SumoManager","","Sumo/SumoManager.html","","<p>Sumo::SumoManager\n"],["Sumo::SumoMap","","Sumo/SumoMap.html","","<p>description of class Foo.\n<p>description of class Foo.\n<p>description of class Foo.\n"],["Sumo::SumoMap::CoordSystem","","Sumo/SumoMap/CoordSystem.html","","<p>coordinate system information. about X-Y coord.\n\n<pre>X : west to east   (same as lon)\nY : south to north (same ...</pre>\n"],["Sumo::SumoMap::Edge","","Sumo/SumoMap/Edge.html","","<p>edge\n"],["Sumo::SumoMap::Junction","","Sumo/SumoMap/Junction.html","","<p>junction.\n"],["Sumo::SumoMap::Lane","","Sumo/SumoMap/Lane.html","","<p>lane\n"],["Sumo::Traci","","Sumo/Traci.html","","<p>module for Traci\n<p>module for Traci\n<p>module for Traci\n"],["Sumo::Traci::Poi","","Sumo/Traci/Poi.html","","<p>PoI class\n"],["Sumo::Traci::PoiManager","","Sumo/Traci/PoiManager.html","","<p>Traci::PoiManager\n"],["Sumo::Traci::Vehicle","","Sumo/Traci/Vehicle.html","","<p>Traci::Vehicle\n<p>Traci::Vehicle\n"],["Sumo::Traci::Vehicle::Location","","Sumo/Traci/Vehicle/Location.html","","<p>location class to indicate location on a map.\n"],["Sumo::Traci::VehicleManager","","Sumo/Traci/VehicleManager.html","","<p>Traci::Vehicle\n"],["Sumo::Util","","Sumo/Util.html","","<p>Util module\n"],["Sumo::Util::NamedIdEntry","","Sumo/Util/NamedIdEntry.html","","<p>Generic Entry for Named Id\n"],["Sumo::Util::NamedIdTable","","Sumo/Util/NamedIdTable.html","","<p>Generic Table for Named Id\n"],["SumoUtil_Doc_Jp","","SumoUtil_Doc_Jp.html","","<p>## = Sumo Utility Library\n<p>## Author &mdash; Anonymous3\n<p>## Version &mdash; 0.0 2018/04/27 Anonymous3\n"],["TC_Foo","","TC_Foo.html","","<p>unit test for this file.\n<p>unit test for this file.\n<p>unit test for this file.\n"],["TC_SavBase","","TC_SavBase.html","","<p>unit test for this file.\n<p>unit test for this file.\n<p>unit test for this file.\n"],["TC_SavTrip","","TC_SavTrip.html","","<p>unit test for this file.\n"],["TC_SavUtil","","TC_SavUtil.html","","<p>unit test for this file.\n"],["TC_SavVehicle","","TC_SavVehicle.html","","<p>unit test for this file.\n<p>unit test for this file.\n"],["TC_SumoManger","","TC_SumoManger.html","","<p>unit test for this file.\n"],["TC_TraciClient","","TC_TraciClient.html","","<p>unit test for this file.\n"],["TC_Vehicle","","TC_Vehicle.html","","<p>unit test for this file.\n<p>unit test for this file.\n"],["TC_VehicleManager","","TC_VehicleManager.html","","<p>unit test for this file.\n<p>unit test for this file.\n<p>unit test for this file.\n"],["Time","","Time.html","",""],["[]","Sav::TentativeArray","Sav/TentativeArray.html#method-i-5B-5D","(n)","<p>get nth. (operator)\n"],["__cycleCheckVehicles_notGood","Sumo::SumoManager","Sumo/SumoManager.html#method-i-__cycleCheckVehicles_notGood","()","<p>cycle to check vehicle existense. (obsolute.  this is not perfect.  use\nVehicle#isAlive())\n"],["add","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-add","(*args)","<p>add entry\n<p>args &mdash; params to pass to entryClass.new()\n<p>return &mdash; new entry\n"],["add","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-add","(*args)","<p>add\n"],["addAsPoi","Sav::SavBase","Sav/SavBase.html#method-i-addAsPoi","(color = DefaultColor)","<p>add as PoI\n<p>color &mdash; color of PoI\n\n"],["addBody","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-addBody","(checkDuplicate, *args)","<p>add entry.  body part\n<p>_checkDuplicate &mdash; if true, check duplicate registration to table.\n<p>args &mdash; params to pass …\n"],["addExtra","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-addExtra","(*args)","<p>add extra entry (without duplicate check)\n<p>args &mdash; params to pass to entryClass.new()\n<p>return &mdash; new entry\n"],["addExtra","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-addExtra","(*args)","<p>add extra\n"],["addNewSavVehicle","Sav::SavBase","Sav/SavBase.html#method-i-addNewSavVehicle","()","<p>add savVehicle\n"],["addSharedWith","Sav::SavDemand","Sav/SavDemand.html#method-i-addSharedWith","(demand)","<p>add shared with\n"],["allocate","Sav::SavAllocator","Sav/SavAllocator.html#method-i-allocate","(demandList)","<p>allocate actual allocation should be done in this method.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated …\n"],["allocate","Sav::SavAllocatorRandom","Sav/SavAllocatorRandom.html#method-i-allocate","(demandList)","<p>allocate SAVs to the list of demands randomly.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated demands. …\n"],["allocate","Sav::SavAllocatorSeqOpt","Sav/SavAllocatorSeqOpt.html#method-i-allocate","(demandList)","<p>allocate SAVs to the list of demands randomly.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated demands. …\n"],["allocateDemandToSav","Sav::SavAllocator","Sav/SavAllocator.html#method-i-allocateDemandToSav","(demand, sav, tripIndex, cancelReason = [], mode = :averageManhattan)","<p>allocate a demand to a sav. if the sav is nil, then, cancel the demand.\n<p>demand  &mdash; a SavDemand to allocate. …\n"],["allocateInit","Sav::SavAllocator","Sav/SavAllocator.html#method-i-allocateInit","()","<p>initialize step of allocate\n"],["allocateOne","Sav::SavAllocatorSeqOpt","Sav/SavAllocatorSeqOpt.html#method-i-allocateOne","(demand)","<p>allocate a demand to a certain sav.\n<p>demand &mdash; SavDemand.\n<p>return  &mdash; allocated sav\n"],["allocateViaPoints","Sav::SavDemand","Sav/SavDemand.html#method-i-allocateViaPoints","(simulator)","<p>allocate via points\n"],["arrivedAt","Sav::ViaPoint","Sav/ViaPoint.html#method-i-arrivedAt","(time)","<p>set arrive time.\n<p>time  &mdash; time to arrive.\n<p>return  &mdash; self.\n"],["averageManhattanDistance","Sav::Util","Sav/Util.html#method-i-averageManhattanDistance","(pos0, pos1)","<p>average manhattan distance. Average Manhattan distance can be calculated\nthe following form. ave® = …\n"],["bbox","Sumo::SumoMap","Sumo/SumoMap.html#method-i-bbox","()","<p>get bbox value of the map.\n<p>*return_  &mdash; Box instance\n\n"],["buildRTrees","Sumo::SumoMap","Sumo/SumoMap.html#method-i-buildRTrees","()","<p>build rtree\n<p>return &mdash; self\n\n"],["cancel","Sav::SavDemand","Sav/SavDemand.html#method-i-cancel","(simulator, reason = :notAssigned)","<p>cancel the demand.\n"],["checkPermissionFor","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-checkPermissionFor","(type = :private)","<p>check permission for a certain type\n<p>type  &mdash; type symbol.  Nomally :private (private car).\n<p>return  &mdash; true if …\n"],["checkPermissionFor","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-checkPermissionFor","(type = :private)","<p>check permission for a certain type\n<p>type  &mdash; type symbol.  Nomally :private (private car).\n<p>return  &mdash; true if …\n"],["checkVehicleAliveOrDrop","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-checkVehicleAliveOrDrop","(vehicle)","<p>check vehicle is alive or drop it.\n<p>vehicle  &mdash; vehicle ID\n<p>return  &mdash; true if the vehicle is alive.\n"],["clearPoi","Sav::ViaPoint","Sav/ViaPoint.html#method-i-clearPoi","(simulator)","<p>setup PoI\n"],["comAddVehicle","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-comAddVehicle","(vehicleType, route, time = nil, departPos = 0.0, speed = 0.0, laneIndex = 0)","<p>fetch all static parameters via client\n<p>vehicleType  &mdash; vehicle type (String)\n<p>route  &mdash; route ID (String)\n"],["comAddVehicleByInitArgs","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-comAddVehicleByInitArgs","()","<p>再度 add する時用。\n"],["compareScore","Sav::SavAllocatorSeqOpt","Sav/SavAllocatorSeqOpt.html#method-i-compareScore","(oldScore, newScore)","<p>compare allocation score.\n<p>oldScore &mdash; old best score. nil if no best.\n<p>newScore &mdash; new score.\n"],["convertSecToSimUnits","Sumo::Util","Sumo/Util.html#method-i-convertSecToSimUnits","(sec)","<p>convert time in sec to SUMO&#39;s simulation units\n"],["convertSimUnitsToSec","Sumo::Util","Sumo/Util.html#method-i-convertSimUnitsToSec","(simUnits)","<p>convert SUMO&#39;s simulation units to time in sec\n"],["currentTimeInString","Sumo::SumoManager","Sumo/SumoManager.html#method-i-currentTimeInString","()","<p>current time in String\n"],["cycleCheckProcessingList","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-cycleCheckProcessingList","()","<p>check processing. if the demand is completed, move the demand from\nprocessing to completed list.\n"],["disposeMapComponents","Sumo::SumoMap","Sumo/SumoMap.html#method-i-disposeMapComponents","()","<p>dispose and reallange parts of the network.\n<p>return &mdash; self\n\n"],["dumpToFile","Sumo::SumoMap","Sumo/SumoMap.html#method-i-dumpToFile","(file)","<p>dump SumoMap to a file.\n<p>file &mdash; dump file name.\n\n"],["dumpToFile","Sumo::SumoMap","Sumo/SumoMap.html#method-c-dumpToFile","(map, file)","<p>dump SumoMap to a file. (class method)\n<p>map &mdash; object to dump\n<p>file &mdash; dump file name.\n"],["each","Sav::TentativeArray","Sav/TentativeArray.html#method-i-each","(&block)","<p>each\n"],["eachVehicle","Sumo::SumoManager","Sumo/SumoManager.html#method-i-eachVehicle","(*args, &block)","<p>each Vehicle iteration. Usage:\n\n<pre>self.eachVehicle(fooVal, barVal){|vehicle, foo, bar|\n     ... }</pre>\n<p>_*args_ … &mdash; "],["ensureDir","Sav::Util","Sav/Util.html#method-i-ensureDir","(filename)","<p>make sure the directory exists.\n"],["ensureGeoObj","Sav::Trip","Sav/Trip.html#method-i-ensureGeoObj","(klass = Geo2D::Point)","<p>ensure GeoPos\n"],["ensureTraciClient","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-ensureTraciClient","(client)","<p>make sure the client\n<p>client &mdash; TraciClient\n<p>return &mdash; TraciClient\n"],["ensureTraciClient","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-ensureTraciClient","(client)","<p>make sure the client\n<p>client &mdash; TraciClient\n<p>return &mdash; TraciClient\n"],["ensureTrip","Sav::Trip","Sav/Trip.html#method-c-ensureTrip","(value)","<p>ensure Trip instance\n"],["entryClass","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-entryClass","()","<p>entry class\n"],["estimateDistance","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateDistance","(from, to, mode = :averageManhattan)","<p>estimate distance between two viaPoint <em>from</em>, <em>to</em> : two\nViaPoint or Geo2D::Vector <em>mode</em> : specify estimation …\n"],["estimateDistanceBetweenPos_averageManhattan","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateDistanceBetweenPos_averageManhattan","(fromPos, toPos)","<p>estimate distance between two position. (average Manhattan distance)\n<em>fromPos</em>, <em>toPos</em> : two pos.  should …\n"],["estimateDistanceBody","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateDistanceBody","(fromPos, toPos, mode = :averageManhattan)","<p>estimate distance between two position. <em>fromPos</em>, <em>toPos</em> :\ntwo pos. <em>mode</em> : specify estimation mode.\n"],["estimateTime","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateTime","(from, to, sav, mode = :averageManhattan)","<p>estimate time.  <em>from</em>, <em>to</em> : two ViaPoint or Geo2D::Vector\n<em>sav</em> : vehicle to use. <em>mode</em> : specify estimation …\n"],["estimateTimeForNewRoute","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateTimeForNewRoute","(sav, demand, tripIndex, storeNewPlanP = false, mode = :averageManhattan)","<p>estimate time for whole of a SAV route with new demands  <em>sav</em> :\nvehicle to use. <em>demand</em> : new demand.  …\n"],["estimateTimeForNewRouteBody","Sav::SavAllocator","Sav/SavAllocator.html#method-i-estimateTimeForNewRouteBody","(sav, route, storeNewPlanP = false, mode = :averageManhattan)","<p>estimate time for whole of a SAV route with new demands  (body)\n"],["fetchAllDynamic","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchAllDynamic","(client = nil)","<p>fetch all dynamic parameters via client\n"],["fetchAllStatic","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchAllStatic","(client = nil)","<p>fetch all static parameters via client\n"],["fetchEdgeList","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchEdgeList","(client = nil)","<p>fetch edge list\n<p>client &mdash; TraciClient\n<p>return &mdash; length\n"],["fetchLaneLength","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-fetchLaneLength","(laneId, laneIndex = nil)","<p>fetchLaneLength\n<p>laneId  &mdash; lane ID or edge ID.  if edge ID, need lane index;\n<p>laneIndex  &mdash; lane index in the …\n"],["fetchLength","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchLength","(client = nil)","<p>fetch length value via server\n<p>client &mdash; TraciClient\n<p>return &mdash; length\n"],["fetchLocation","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchLocation","(client = nil)","<p>fetch location in map (edgeID, lane index, location on the lane)\n<p>client &mdash; TraciClient\n<p>return &mdash; location (Location …\n"],["fetchPosition","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchPosition","(client = nil)","<p>fetch 2D position\n<p>client &mdash; TraciClient\n<p>return &mdash; position in Geo2D::Point.\n"],["fetchRouteIndex","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchRouteIndex","(client = nil)","<p>fetch edge list\n<p>client &mdash; TraciClient\n<p>return &mdash; route index\n"],["fetchSimulationTimeInSec","Sumo::SumoManager","Sumo/SumoManager.html#method-i-fetchSimulationTimeInSec","()","<p>fetch simulation time in sec\n"],["fetchSpeed","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchSpeed","(client = nil)","<p>fetch speed\n<p>client &mdash; TraciClient\n<p>return &mdash; speed\n"],["fetchStopState","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchStopState","(client = nil)","<p>fetch stop status\n<p>client &mdash; TraciClient\n<p>return &mdash; list of stop state.  return nil of vehicle is not exists.\n"],["fetchType","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchType","(client = nil)","<p>fetch vehicle type\n<p>client &mdash; TraciClient\n<p>return &mdash; length\n"],["fetchVehicleIdList","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-fetchVehicleIdList","()","<p>fetch whole vehicle ID list\n"],["fetchWidth","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-fetchWidth","(client = nil)","<p>fetch width value via server\n<p>client &mdash; TraciClient\n<p>return &mdash; length\n"],["findNearestEdgeFrom","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestEdgeFrom","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["findNearestEdgeFromLonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestEdgeFromLonLat","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; lon-lat by Geo2D::Point.\n<p>*return_  &mdash; an edge\n"],["findNearestJunctionFrom","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestJunctionFrom","(reference)","<p>find nearest junction from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …) …\n"],["findNearestJunctionFromLonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestJunctionFromLonLat","(reference)","<p>find nearest junction from a reference geo object\n<p>reference  &mdash; lon-lat by Geo2D::Point.\n<p>*return_  &mdash; a junction …\n"],["findNearestLaneFrom","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestLaneFrom","(reference)","<p>find nearest lane from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["findNearestLaneFromLonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestLaneFromLonLat","(reference)","<p>find nearest lane from a reference geo object\n<p>reference  &mdash; lon-lat by Geo2D::Point.\n<p>*return_  &mdash; a lane\n"],["findNearestOnEdgeFrom","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestOnEdgeFrom","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["findNearestOnEdgeFromLonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestOnEdgeFromLonLat","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["findNearestOnLaneFrom","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestOnLaneFrom","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["findNearestOnLaneFromLonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-findNearestOnLaneFromLonLat","(reference)","<p>find nearest edge from a reference geo object\n<p>reference  &mdash; Geo2D objects (Point, LineString, Box, …)\n<p>*return_ … &mdash; "],["firstLane","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-firstLane","()","<p>first lane\n"],["footPointFrom","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-footPointFrom","(reference)","<p>get foot point from the reference point.\n<p>reference  &mdash; reference point\n<p>return  &mdash; foot point\n"],["footPointFrom","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-footPointFrom","(reference)","<p>get the foot point from the reference point.\n<p>reference  &mdash; reference point\n<p>return  &mdash; Geo2D::Point of the foot …\n"],["footPointSpanFrom","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-footPointSpanFrom","(reference, forStop = false)","<p>get the span of foot point from the reference point.\n<p>reference  &mdash; reference point\n<p>forStop  &mdash; if true, adjust …\n"],["footPointSpanFrom","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-footPointSpanFrom","(reference)","<p>get the span of foot point from the reference point.\n<p>reference  &mdash; reference point\n<p>return  &mdash; span\n"],["formAreaShape","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-formAreaShape","(areaDef)","<p>form area shape from area definition.\n"],["genShapeJson","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-genShapeJson","()","<p>convert shape to JSON object (Array of point ([x, y])).\n"],["generateLaneId","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-generateLaneId","(edgeId, laneIndex)","<p>generate lane ID\n<p>edgeId  &mdash; edge ID (String)\n<p>laneIndex  &mdash; index of the lane in the edge\n"],["geoObject","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-geoObject","()","<p>get GeoObject. used in RTree.\n<p>return  &mdash; Geo2D::GeoObject for RTree\n\n"],["geoObject","Sumo::SumoMap::Junction","Sumo/SumoMap/Junction.html#method-i-geoObject","()","<p>get GeoObject. used in RTree.\n<p>return  &mdash; Geo2D::GeoObject for RTree\n\n"],["geoObject","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-geoObject","()","<p>get GeoObject. used in RTree.\n<p>return  &mdash; Geo2D::GeoObject for RTree\n\n"],["getAttrVal","Sumo::SumoMap","Sumo/SumoMap.html#method-c-getAttrVal","(xml, attr)",""],["getById","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-getById","(id)","<p>get by id\n<p>id &mdash; entry id\n<p>return &mdash; type if exist\n"],["getById","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-getById","(id)","<p>get by type id\n"],["getByName","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-getByName","(name)","<p>get by name\n<p>name &mdash; type name\n<p>return &mdash; entry if exist\n"],["getByName","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-getByName","(name)","<p>get by type name\n"],["getByNameInConstant","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-i-getByNameInConstant","(name)","<p>get by nameInConstant\n<p>name &mdash; type name\n<p>return &mdash; entry if exist\n"],["getByNameInConstant","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-getByNameInConstant","(name)","<p>get by type nameInConstant\n"],["getColorValue","Sumo::Util","Sumo/Util.html#method-i-getColorValue","(colorName, alpha = nil)","<p>get color value.\n<p>colorName  &mdash; String or Symbol of color name or Hash of color value\n<p>return  &mdash; { :r =&gt; rVal, …\n"],["getConnectedEdgeIds","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getConnectedEdgeIds","()","<p>get connected edge ids from this edge.\n<p>return  &mdash; the list of edge.\n\n"],["getConnectedEdges","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getConnectedEdges","(map)","<p>get connected edges from this edge.\n<p>map  &mdash; mother map\n<p>return  &mdash; the list of edge.\n"],["getDropOffTime","Sav::SavDemand","Sav/SavDemand.html#method-i-getDropOffTime","()","<p>drop-off time.\n<p>return &mdash; time of drop-off in sec\n\n"],["getEdge","Sav::ViaPoint","Sav/ViaPoint.html#method-i-getEdge","()","<p>get Edge of viaPoint\n"],["getEdgeForUTurn","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getEdgeForUTurn","(map)","<p>get target edge for U-turn\n<p>map &mdash; mother map.\n<p>return  &mdash; edge\n"],["getEndPoint","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getEndPoint","()","<p>get exit end of the lane 0\n<p>return  &mdash; Geo2D::Point instance\n\n"],["getEndPoint","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-getEndPoint","()","<p>get exit end of the lane\n<p>return  &mdash; Geo2D::Point instance\n\n"],["getGeoFeature","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-getGeoFeature","(name)","<p>get SavGeoFeature by name\n"],["getLocation","Sav::ViaPoint","Sav/ViaPoint.html#method-i-getLocation","()","<p>get span on edge of viaPoint\n"],["getOppositeEdge","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getOppositeEdge","(map)","<p>get opposite edge\n<p>map &mdash; mother map.\n<p>return  &mdash; opposite edge if exists.  otherwise, nil.\n"],["getPickUpTime","Sav::SavDemand","Sav/SavDemand.html#method-i-getPickUpTime","()","<p>pick-up time.\n<p>return &mdash; time of pick-up in sec\n\n"],["getPointForUTurn","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getPointForUTurn","(map)","<p>get target Pointfor U-turn\n<p>map &mdash; mother map.\n<p>return  &mdash; Geo2D::Point\n"],["getSpan","Sav::SavBase","Sav/SavBase.html#method-i-getSpan","()","<p>add savVehicle\n"],["getSpan","Sav::ViaPoint","Sav/ViaPoint.html#method-i-getSpan","()","<p>get span on edge of viaPoint\n"],["getStartPoint","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-getStartPoint","()","<p>get exit end of the lane 0\n<p>return  &mdash; Geo2D::Point instance\n\n"],["getStartPoint","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-getStartPoint","()","<p>get exit end of the lane\n<p>return  &mdash; Geo2D::Point instance\n\n"],["getState","Sav::SavDemand","Sav/SavDemand.html#method-i-getState","()","<p>state of demand.\n<p>return &mdash; one of {:notAssigned, :beforePickUp, :onBoard, :afterDropOff}\n\n"],["getTripPlannedTime","Sav::SavDemand","Sav/SavDemand.html#method-i-getTripPlannedTime","()","<p>access to planned time\n<p>return &mdash; current planned time. return nil if no planned time.\n\n"],["getTripTime","Sav::SavDemand","Sav/SavDemand.html#method-i-getTripTime","()","<p>trip paier of travel time\n<p>return &mdash; Trip of pick-up and drop-off time\n\n"],["hasDemand","Sav::ViaPoint","Sav/ViaPoint.html#method-i-hasDemand","()","<p>check dummy-ness\n"],["help","Object","Object.html#method-i-help","()","<p>help\n"],["inspect","Sav::SavAllocator","Sav/SavAllocator.html#method-i-inspect","()",""],["inspect","Sav::SavDemand","Sav/SavDemand.html#method-i-inspect","()",""],["inspect","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-inspect","()",""],["inspect","Sav::SavReporter","Sav/SavReporter.html#method-i-inspect","()",""],["inspect","Sav::ViaPoint","Sav/ViaPoint.html#method-i-inspect","()",""],["inspect","Sumo::SumoMap","Sumo/SumoMap.html#method-i-inspect","()",""],["inspect","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-inspect","()",""],["inspect","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-inspect","()",""],["inspect","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-inspect","()",""],["inspect","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-inspect","()",""],["inspect_original","Sav::SavAllocator","Sav/SavAllocator.html#method-i-inspect_original","()","<p>for inspect()\n"],["inspect_original","Sav::SavDemand","Sav/SavDemand.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-inspect_original","()","<p>for inspect()\n"],["inspect_original","Sav::SavReporter","Sav/SavReporter.html#method-i-inspect_original","()","<p>for inspect()\n"],["inspect_original","Sav::ViaPoint","Sav/ViaPoint.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sumo::SumoMap","Sumo/SumoMap.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-inspect_original","()","<p>re-define inspect\n"],["inspect_original","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-inspect_original","()","<p>re-define inspect\n"],["isAheadOf","Sumo::Traci::Vehicle::Location","Sumo/Traci/Vehicle/Location.html#method-i-isAheadOf","(location)","<p>check the self location is ahead of the give location on the same edge.\n"],["isAlive","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-isAlive","(client = nil)","<p>check vehicle is alive.\n<p>client &mdash; TraciClient\n<p>return &mdash; true if vehicle is alive.\n"],["isArrived","Sav::ViaPoint","Sav/ViaPoint.html#method-i-isArrived","()","<p>set arrive time.\n"],["isCloseEnough","Sumo::Traci::Vehicle::Location","Sumo/Traci/Vehicle/Location.html#method-i-isCloseEnough","(location, checkLaneP = false, margin = 1.0)","<p>check the same\n"],["isDropOff","Sav::ViaPoint","Sav/ViaPoint.html#method-i-isDropOff","()","<p>check dummy-ness\n"],["isDummy","Sav::ViaPoint","Sav/ViaPoint.html#method-i-isDummy","()","<p>check dummy-ness\n"],["isFinished?","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-isFinished-3F","()","<p>check status is finished\n"],["isOnRoad?","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-isOnRoad-3F","()","<p>check status is running\n"],["isOppositeEdge","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-isOppositeEdge","(edge)","<p>check the edge is opposite\n<p>return  &mdash; true if the given edge is opposite.\n\n"],["isPickUp","Sav::ViaPoint","Sav/ViaPoint.html#method-i-isPickUp","()","<p>check dummy-ness\n"],["isStopped","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-isStopped","(client = nil)","<p>check vehicle is stopped.\n<p>client &mdash; TraciClient\n<p>return &mdash; true if vehicle is stopped.\n"],["isTcpPortInUse","Sumo::Util","Sumo/Util.html#method-i-isTcpPortInUse","(port)","<p>check TCP port is used\n<p>port &mdash; port number to check\n<p>return  &mdash; true if the port is used\n"],["joinToOnBoardList","Sav::SavDemand","Sav/SavDemand.html#method-i-joinToOnBoardList","(onBoardList)","<p>join to the list of on-board demands.\n"],["kthIndex","Sav::TentativeArray","Sav/TentativeArray.html#method-i-kthIndex","(k)","<p>get k-th index in the tentative array.\n"],["laneId","Sumo::Traci::Vehicle::Location","Sumo/Traci/Vehicle/Location.html#method-i-laneId","()","<p>generate LaneID from EdgeId and LaneIndex.\n"],["length","Sav::TentativeArray","Sav/TentativeArray.html#method-i-length","()",""],["length","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-length","()","<p>get length\n"],["letFinished","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-letFinished","()","<p>make status is running\n"],["letRunning","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-letRunning","()","<p>make status is running\n"],["letSkipped","Sav::ViaPoint","Sav/ViaPoint.html#method-i-letSkipped","(_time, _reason)","<p>let phase skipped\n<p>time  &mdash; time to skip.\n<p>reason  &mdash; reason to skip.\n"],["loadJsonFile","Sumo::SumoMap","Sumo/SumoMap.html#method-i-loadJsonFile","(jsonFile, vehicleType = nil)","<p>load Json file\n<p>jsonFile  &mdash; JSON for one Edge.\n<p>vehicleType  &mdash; if non-nil, scan only permitted edge for the type. …\n"],["loadXmlFile","Sumo::SumoMap","Sumo/SumoMap.html#method-i-loadXmlFile","(netFile, vehicleType = nil, excludeTypeList = [])","<p>load XML file.\n<p>netFile &mdash; MapNet XML file.\n<p>vehicleType  &mdash; if non-nil, scan only permitted edge for the type. …\n"],["logging","Sav::SavAllocator","Sav/SavAllocator.html#method-i-logging","(level, *messageList, &body)","<p>logging\n"],["logging","Sav::SavReporter","Sav/SavReporter.html#method-i-logging","(level, *messageList, &body)","<p>logging\n"],["logging","Sumo::SumoManager","Sumo/SumoManager.html#method-i-logging","(level, *messageList, &body)","<p>logging\n"],["logging","Sumo::SumoMap","Sumo/SumoMap.html#method-i-logging","(level, *messageList, &body)","<p>logging\n"],["logging","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-logging","(level, *messageList, &body)","<p>logging\n"],["makeReportForOneSav","Sav::SavReporter","Sav/SavReporter.html#method-i-makeReportForOneSav","(sav, withDemandP)","<p>allocate actual allocation should be done in this method.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated …\n"],["makeReportInJsonList","Sav::SavReporter","Sav/SavReporter.html#method-i-makeReportInJsonList","()","<p>allocate actual allocation should be done in this method.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated …\n"],["map","Sav::TentativeArray","Sav/TentativeArray.html#method-i-map","(&block)","<p>map\n"],["nPoi","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-nPoi","()","<p>number of PoI\n"],["new","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-c-new","(logFileName, conf = {})","<p>description of method initialize\n<p>baz &mdash; about argument baz.\n\n"],["new","Sav::SavAllocator","Sav/SavAllocator.html#method-c-new","(savSim, conf = {})","<p>initialize\n<p>savSim  &mdash; parent simulator\n<p>conf &mdash; configuration information\n"],["new","Sav::SavBase","Sav/SavBase.html#method-c-new","(savSim, position, name = nil, addPoiP = true)","<p>initialize\n<p>savSim  &mdash; parent simulator\n<p>position  &mdash; position of the base\n"],["new","Sav::SavDemand","Sav/SavDemand.html#method-c-new","(passenger, numPassenger, tripPos, simulator, conf = {})","<p>initialize.\n"],["new","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-c-new","(savSim, conf = {})","<p>initialize\n<p>savSim  &mdash; parent simulator\n<p>conf &mdash; configuration information\n"],["new","Sav::SavReporter","Sav/SavReporter.html#method-c-new","(savSim, conf = {})","<p>initialize\n<p>savSim  &mdash; parent simulator\n<p>conf &mdash; configuration information\n"],["new","Sav::TentativeArray","Sav/TentativeArray.html#method-c-new","(base, idxList, objList)","<p>initialize.\n"],["new","Sav::Trip","Sav/Trip.html#method-c-new","(_pickUp = nil, _dropOff = nil)","<p>initialize.\n"],["new","Sav::ViaPoint","Sav/ViaPoint.html#method-c-new","(position, demand, mode, duration, simulator, conf = {})","<p>initialize\n"],["new","Sumo::SumoException","Sumo/SumoException.html#method-c-new","(message = nil, param = {})","<p>initialization.\n<p>message &mdash; message of exception.\n<p>params &mdash; additional parameters in Hash table.\n"],["new","Sumo::SumoManager","Sumo/SumoManager.html#method-c-new","(conf = {})","<p>description of method initialize\n<p>conf &mdash; configulation\n\n"],["new","Sumo::SumoMap","Sumo/SumoMap.html#method-c-new","(conf = {})","<p>initialize\n"],["new","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-c-new","(xml = nil)","<p>initialize\n<p>xml &mdash; XML element\n\n"],["new","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-c-new","(xml = nil)","<p>initialize\n<p>xml &mdash; XML element\n\n"],["new","Sumo::SumoMap::Junction","Sumo/SumoMap/Junction.html#method-c-new","(xml = nil)","<p>initialize\n<p>xml &mdash; XML element\n\n"],["new","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-c-new","(xml = nil, edge = nil)","<p>initialize\n<p>xml &mdash; XML element\n\n"],["new","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-c-new","(manager, id, position, conf = {})","<p>description of method initialize\n<p>manager &mdash; PoiManager\n<p>id &mdash; ID of PoI.\n"],["new","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-c-new","(conf = {})","<p>description of method initialize\n<p>conf &mdash; configulation\n\n"],["new","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-c-new","(manager, id = nil, conf = {})","<p>description of method initialize\n<p>conf &mdash; configulation\n\n"],["new","Sumo::Traci::Vehicle::Location","Sumo/Traci/Vehicle/Location.html#method-c-new","(_edge, _laneIndex, _posOnLane)","<p>initialize\n"],["new","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-c-new","(conf = {})","<p>description of method initialize\n<p>conf &mdash; configulation\n\n"],["new","Sumo::Util::NamedIdEntry","Sumo/Util/NamedIdEntry.html#method-c-new","(name, cname, *rest)","<p>initialization\n<p>name &mdash; name of data type. should be Symbol.\n<p>cname &mdash; name in Constant table. should be String …\n"],["new","Sumo::Util::NamedIdTable","Sumo/Util/NamedIdTable.html#method-c-new","()","<p>initialization\n"],["newDemand","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-newDemand","()","<p>generate new demand() ;\n"],["newDemand","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-newDemand","()","<p>generate new demand() ;\n"],["newDemand","Sav::SavDemandFactoryRandom","Sav/SavDemandFactoryRandom.html#method-i-newDemand","()","<p>generate new demand() ;\n"],["newDemandListForCycle","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-newDemandListForCycle","()","<p>generate new demands in a cycle\n"],["newDemandListForCycle","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-newDemandListForCycle","()","<p>generate new demands in a cycle\n"],["newDemandListForCycle","Sav::SavDemandFactoryMixture","Sav/SavDemandFactoryMixture.html#method-i-newDemandListForCycle","()","<p>generate new demands in a cycle\n"],["newDemandListForCycle","Sav::SavDemandFactoryRandom","Sav/SavDemandFactoryRandom.html#method-i-newDemandListForCycle","()","<p>generate new demands in a cycle\n"],["newDemandListForCycle","Sav::SavDemandFactoryUserAgent","Sav/SavDemandFactoryUserAgent.html#method-i-newDemandListForCycle","()","<p>generate new demands in a cycle\n"],["newVehicle","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-newVehicle","(vehicleId, conf={})","<p>create new vehicle that already exists in SUMO.\n<p>vehicleId  &mdash; vehicle ID\n<p>return  &mdash; instance of Vehicle\n"],["novelPoiId","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-novelPoiId","()","<p>generate novel vehicle ID\n"],["novelVehicleId","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-novelVehicleId","()","<p>generate novel vehicle ID\n"],["nth","Sav::TentativeArray","Sav/TentativeArray.html#method-i-nth","(n)","<p>get nth.\n"],["octalDump","Sumo::Util","Sumo/Util.html#method-i-octalDump","(data)","<p>octal dump\n<p>str &mdash; binary string\n<p>return  &mdash; dumped string\n"],["originalId","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-originalId","()","<p>get originalId\n"],["outputDemandLogInJson","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-outputDemandLogInJson","(demand)","<p>output demand JSON to log file\n"],["outputResult","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-outputResult","(prettyP = true, strm = $stdout)","<p>output result\n"],["postSetupAfterAdd","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-postSetupAfterAdd","()","<p>add vehicle の後処理\n"],["prepareLog","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-prepareLog","()","<p>prepare log stream\n"],["pushAllocatedDemand","Sav::SavAllocator","Sav/SavAllocator.html#method-i-pushAllocatedDemand","(demand)","<p>push allocated demand to the result list.\n"],["pushCancelledDemand","Sav::SavAllocator","Sav/SavAllocator.html#method-i-pushCancelledDemand","(demand)","<p>push canceled demand to the result list.\n"],["registerNewDemandList","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-registerNewDemandList","(demandList, cancelList, processing = true)","<p>registerNewDemandList\n"],["renewId","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-renewId","()","<p>renewId\n"],["report","Sav::SavReporter","Sav/SavReporter.html#method-i-report","()","<p>allocate actual allocation should be done in this method.\n<p>demandList &mdash; list of SavDemand.\n<p>return  &mdash; allocated …\n"],["restoreFromFile","Sumo::SumoMap","Sumo/SumoMap.html#method-c-restoreFromFile","(file)","<p>restore SumoMap from a file. (class method)\n<p>file &mdash; dump file name.\n<p>return &mdash; a SumoMap\n"],["resubmitAddVehicle","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-resubmitAddVehicle","(currentTime, useLastLoc = false)","<p>re-submit add vehicle\n"],["run","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-run","(logfile = @logFileName, prettyP = true, strm = $stdout)","<p>output result\n"],["run","Sumo::SumoManager","Sumo/SumoManager.html#method-i-run","(loopConf = {}, *args, &block)","<p>run Sumo with block\n<p>loopConf  &mdash; configulation for run loop.\n<p>_*args_  &mdash; args to pass to the block.\n"],["saveJsonFile","Sumo::SumoMap","Sumo/SumoMap.html#method-i-saveJsonFile","(jsonFile, prettyP = true)","<p>save to Json file\n<p>jsonFile  &mdash; JSON for one Edge.\n\n"],["scanDistTimeSpeed","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanDistTimeSpeed","(json)","<p>scan distance, time, and speed\n"],["scanDropOffMargin","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanDropOffMargin","(json)","<p>scan drop off margin\n"],["scanFreeTcpPort","Sumo::Util","Sumo/Util.html#method-i-scanFreeTcpPort","(originPort, max = 10000)","<p>scan free TCP port\n<p>originPort &mdash; port number to start scan\n<p>max &mdash; max count to scan\n"],["scanJson","Sumo::SumoMap","Sumo/SumoMap.html#method-i-scanJson","(json, vehicleType = nil)","<p>scan JSON object (hash)\n<p>vehicleType  &mdash; if non-nil, scan only permitted edge for the type.\n\n\n<pre>typical value is ...</pre>\n"],["scanJson","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-i-scanJson","(json)","<p>convert to JSON object (hash)\n<p>json  &mdash; JSON for one Lane.\n\n"],["scanJson","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-scanJson","(json)","<p>scan JSON object (hash)\n<p>json  &mdash; JSON for one Edge.\n\n"],["scanJson","Sumo::SumoMap::Junction","Sumo/SumoMap/Junction.html#method-i-scanJson","(json)","<p>convert to JSON object (hash)\n<p>json  &mdash; JSON for one Lane.\n\n"],["scanJson","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-scanJson","(json, edge)","<p>convert to JSON object (hash)\n<p>json  &mdash; JSON for one Lane.\n\n"],["scanLogFile","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanLogFile","(fileName = @logFileName)","<p>scan log file.\n"],["scanLogInit","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanLogInit","()","<p>scan log stream.\n"],["scanLogJson","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanLogJson","(json)","<p>scan log stream.\n"],["scanLogStream","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanLogStream","(strm)","<p>scan log stream.\n"],["scanShapeJson","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-scanShapeJson","(shapeJson)","<p>convert to JSON object (hash)\n<p>shapeJson  &mdash; a list of xy pair ([[x0, y0], [x1, y1], …])\n\n"],["scanShareCount","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-scanShareCount","(json)","<p>scan share count\n"],["scanXml","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-i-scanXml","(xml)","<p>scan XML definition\n<p>xml &mdash; XML element\n\n"],["scanXml","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-scanXml","(xml)","<p>scan XML definition\n<p>xml &mdash; XML element\n\n"],["scanXml","Sumo::SumoMap::Junction","Sumo/SumoMap/Junction.html#method-i-scanXml","(xml)","<p>scan XML definition\n<p>xml &mdash; XML element\n\n"],["scanXml","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-scanXml","(xml, edge)","<p>scan XML definition\n<p>xml &mdash; XML element\n\n"],["setLogger","Sumo::SumoMap","Sumo/SumoMap.html#method-i-setLogger","(_logger = nil)","<p>set logger\n"],["setTraciClient","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-setTraciClient","(client)","<p>set traci client\n<p>client &mdash; instance of TraciClient or nil\n\n"],["setTraciClient","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-setTraciClient","(client)","<p>set traci client\n<p>client &mdash; instance of TraciClient or nil\n\n"],["setup","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-setup","()","<p>setup parameters.\n"],["setup","Sav::SavAllocator","Sav/SavAllocator.html#method-i-setup","()","<p>setup. should be re-defined in subclass if needed.\n"],["setup","Sav::SavAllocatorRandom","Sav/SavAllocatorRandom.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavAllocatorSeqOpt","Sav/SavAllocatorSeqOpt.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavDemandFactory","Sav/SavDemandFactory.html#method-i-setup","()","<p>setup. should be re-defined in subclass if needed.\n"],["setup","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavDemandFactoryMixture","Sav/SavDemandFactoryMixture.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavDemandFactoryRandom","Sav/SavDemandFactoryRandom.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavDemandFactoryUserAgent","Sav/SavDemandFactoryUserAgent.html#method-i-setup","()","<p>setup.\n"],["setup","Sav::SavReporter","Sav/SavReporter.html#method-i-setup","()","<p>setup. should be re-defined in subclass if needed.\n"],["setup","Sumo::SumoManager","Sumo/SumoManager.html#method-i-setup","()","<p>setup\n"],["setup","Sumo::SumoMap","Sumo/SumoMap.html#method-i-setup","()","<p>setup\n"],["setup","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-setup","(manager, id, position)","<p>setup configuration\n<p>manager &mdash; PoiManager\n<p>id &mdash; ID of PoI.\n"],["setup","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-setup","()","<p>setup\n"],["setup","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-setup","(manager, id)","<p>setup parameters\n"],["setup","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-setup","()","<p>setup\n"],["setup","TC_Foo","TC_Foo.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_SavBase","TC_SavBase.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_SavTrip","TC_SavTrip.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_SavUtil","TC_SavUtil.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_SavVehicle","TC_SavVehicle.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_SumoManger","TC_SumoManger.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_TraciClient","TC_TraciClient.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_Vehicle","TC_Vehicle.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setup","TC_VehicleManager","TC_VehicleManager.html#method-i-setup","()","<p>show separator and title of the test.\n"],["setupFactoryList","Sav::SavDemandFactoryMixture","Sav/SavDemandFactoryMixture.html#method-i-setupFactoryList","(_configList)","<p>setup.\n"],["setupInnerFactory","Sav::SavDemandFactoryUserAgent","Sav/SavDemandFactoryUserAgent.html#method-i-setupInnerFactory","()","<p>setup inner DemandFactory\n"],["setupMap","Sumo::SumoManager","Sumo/SumoManager.html#method-i-setupMap","(conf = {})","<p>setup Sumo Map\n<p>conf  &mdash; configulation for PoiManager.\n\n"],["setupPassengerList","Sav::SavDemandFactoryRandom","Sav/SavDemandFactoryRandom.html#method-i-setupPassengerList","()","<p>setup @rangeBox.\n"],["setupPoi","Sav::ViaPoint","Sav/ViaPoint.html#method-i-setupPoi","(simulator)","<p>setup PoI\n"],["setupPoiManager","Sumo::SumoManager","Sumo/SumoManager.html#method-i-setupPoiManager","(conf = {})","<p>setup new PoI Manager.\n<p>conf  &mdash; configulation for PoiManager.\n\n"],["setupRangeBox","Sav::SavDemandFactoryDirected","Sav/SavDemandFactoryDirected.html#method-i-setupRangeBox","()","<p>setup @rangeBox.\n"],["setupRangeBox","Sav::SavDemandFactoryRandom","Sav/SavDemandFactoryRandom.html#method-i-setupRangeBox","()","<p>setup @rangeBox.\n"],["setupTraciClientWithServer","Sumo::SumoManager","Sumo/SumoManager.html#method-i-setupTraciClientWithServer","(conf = {})","<p>setup new TraciClient.\n<p>conf  &mdash; configulation for TraciClient.\n\n"],["setupUserAgent","Sav::SavDemandFactoryUserAgent","Sav/SavDemandFactoryUserAgent.html#method-i-setupUserAgent","()","<p>setup UserAgent\n"],["setupVehicleManager","Sumo::SumoManager","Sumo/SumoManager.html#method-i-setupVehicleManager","(conf = {})","<p>setup new VehicleManager.\n<p>conf  &mdash; configulation for VehicleManager.\n\n"],["shape","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-shape","()","<p>get shape\n"],["shortName","Sumo::Util::NamedIdEntry","Sumo/Util/NamedIdEntry.html#method-i-shortName","()","<p>shortName\n<p>return &mdash; a short string name\n\n"],["shouldBeExcluded","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-shouldBeExcluded","(excludeTypeList)","<p>check the type is included in the excludeTypeList.\n<p>excludeTypeList  &mdash; array of type symbol.\n<p>return  &mdash; true …\n"],["size","Sav::TentativeArray","Sav/TentativeArray.html#method-i-size","()","<p>length.\n"],["speed","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-speed","()","<p>get speed\n"],["storeToJson","Sav::Util","Sav/Util.html#method-i-storeToJson","(json, key, obj, ignoreNil = true)","<p>store to JSON. <em>json</em> : json hash to store. <em>key</em> : json key.\n<em>obj</em> : value object to convert. <em>ignoreNil</em> : …\n"],["submitAdd","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-submitAdd","(client = nil)","<p>submit Add command\n"],["submitAddPoi","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-submitAddPoi","(poi)","<p>submit add PoI\n<p>poi  &mdash; poi to add\n<p>return  &mdash; new PoI\n"],["submitAddVehicle","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitAddVehicle","(vehicleType, route, time = nil, departPos = 0.0, speed = 0.0, laneIndex = 0)","<p>submit add vehicle\n<p>vehicleType  &mdash; vehicle type (String)\n<p>route  &mdash; route ID (String)\n"],["submitAll","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitAll","(client = nil)","<p>submit values via client\n"],["submitChangeTarget","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitChangeTarget","(targetEdge, client = nil)","<p>submit change target\n<p>edgeId &mdash; target edge\n<p>return &mdash; true if succeed to change the target\n"],["submitColor","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-submitColor","(color, alpha = @colorAlpha, client = nil)","<p>submit change Color\n"],["submitColor","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitColor","(color = nil, client = nil)","<p>submit color\n<p>color &mdash; Symbol, or String of color, or Hash to specify RGBA.\n<p>return &mdash; color value in Hash.\n"],["submitMoveTo","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitMoveTo","(laneId, posInLane = 0.0, client = nil)","<p>submit move to\n<p>laneId &mdash; lane ID (String) or [&lt;edgeId&gt;, &lt;laneIndex&gt;] lane ID must be\nincluded …\n"],["submitNewPoi","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-submitNewPoi","(position, poiId = nil, conf = {})","<p>submit new PoI\n<p>position  &mdash; XY position (in Geo2D::Point or [x, y])\n<p>poiId  &mdash; poiId. if nil assign novel one. …\n"],["submitNewRoute","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-submitNewRoute","(routeId, edgeList)","<p>submit new route\n<p>vehicleType  &mdash; vehicle type (String)\n<p>route  &mdash; route ID (String)\n"],["submitNewVehicle","Sumo::SumoManager","Sumo/SumoManager.html#method-i-submitNewVehicle","(conf, vehicleType, route, departPos = 0.0, speed = 0.0, laneIndex = 0)","<p>submit new vehicle\n<p>vehicleType  &mdash; vehicle type (String)\n<p>route  &mdash; route ID (String)\n"],["submitNewVehicle","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-submitNewVehicle","(conf, vehicleType, route, time = nil, departPos = 0.0, speed = 0.0, laneIndex = 0)","<p>submit new vehicle\n<p>conf &mdash; config prams for new Vehicle.\n<p>vehicleType  &mdash; vehicle type (String)\n"],["submitRemove","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-submitRemove","(client = nil)","<p>submit Remove command\n"],["submitRemove","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitRemove","(reasonCode = :teleport, client = nil)","<p>submit remove.\n<p>reasonCode  &mdash; one of {:teleport, :parking, :arrived,\n\n<pre>:vaporized, :teleport_arrived}.</pre>\n"],["submitRemovePoi","Sumo::Traci::PoiManager","Sumo/Traci/PoiManager.html#method-i-submitRemovePoi","(poi)","<p>submit new PoI\n<p>poi  &mdash; PoI instance or PoI ID.\n<p>return  &mdash; removed object.\n"],["submitRemoveVehicle","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-submitRemoveVehicle","(vehicle, checkP = true)","<p>remove vehicle.\n<p>vehicle  &mdash; vehicle to remove.\n<p>return  &mdash; instance of Vehicle\n"],["submitResume","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitResume","(client = nil)","<p>submit resume\n"],["submitSlowDown","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitSlowDown","(speed, duration, client = nil)","<p>submit slow down\n<p>speed &mdash; speed value\n<p>duration &mdash; duration in sec (Float)\n"],["submitStop","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitStop","(edge, position, laneIndex, duration, option = {}, client = nil)","<p>submit add stop.\n\n<pre>&lt;Flags&gt; are:\n   1 : parking\n   2 : triggered\n   4 : containerTriggered\n   8 : busStop ...</pre>\n"],["submitStopAtEdge","Sumo::Traci::Vehicle","Sumo/Traci/Vehicle.html#method-i-submitStopAtEdge","(edge, position, duration, option = {}, client = nil)","<p>submit add stop on the edge. the most syntax is the same as submitStop, but\nsearch available laneIndex. …\n"],["test_a","TC_Foo","TC_Foo.html#method-i-test_a","()","<p>scan XML file\n"],["test_a","TC_SavBase","TC_SavBase.html#method-i-test_a","()","<p>about test_a\n"],["test_a","TC_SavTrip","TC_SavTrip.html#method-i-test_a","()","<p>about test_a\n"],["test_a","TC_SavUtil","TC_SavUtil.html#method-i-test_a","()","<p>about test_a\n"],["test_a","TC_SavVehicle","TC_SavVehicle.html#method-i-test_a","()","<p>about test_a\n"],["test_a","TC_SumoManger","TC_SumoManger.html#method-i-test_a","()","<p>run with manager using simple map\n"],["test_a","TC_TraciClient","TC_TraciClient.html#method-i-test_a","()","<p>octal dump\n"],["test_a","TC_Vehicle","TC_Vehicle.html#method-i-test_a","()","<p>about test_a\n"],["test_a","TC_VehicleManager","TC_VehicleManager.html#method-i-test_a","()","<p>run with manager using simple map\n"],["test_b","TC_Foo","TC_Foo.html#method-i-test_b","()","<p>scan XML file and save JSON file\n"],["test_b","TC_TraciClient","TC_TraciClient.html#method-i-test_b","()","<p>port checker\n"],["test_b","TC_VehicleManager","TC_VehicleManager.html#method-i-test_b","()","<p>run with manager using Tsukuba map\n"],["test_c","TC_Foo","TC_Foo.html#method-i-test_c","()","<p>scan JSON file\n"],["test_c","TC_VehicleManager","TC_VehicleManager.html#method-i-test_c","()","<p>run with manager using Tsukuba map\n"],["test_d","TC_Foo","TC_Foo.html#method-i-test_d","()","<p>compare reloaded file.\n"],["test_d","TC_VehicleManager","TC_VehicleManager.html#method-i-test_d","()","<p>add new vehicle submitNewVehicle した後には、changeTarget をしないと、うまく動かない。\nおそらく、edges が１つだけだから？\n"],["test_e","TC_Foo","TC_Foo.html#method-i-test_e","()","<p>transform test\n"],["test_e","TC_VehicleManager","TC_VehicleManager.html#method-i-test_e","()","<p>moteTo\n"],["test_f","TC_Foo","TC_Foo.html#method-i-test_f","()","<p>rtree test\n"],["toJson","Geo2D::Vector","Geo2D/Vector.html#method-i-toJson","()","<p>add toJson() method for Geo2D::Vector.\n"],["toJson","Sav::DemandLogAnalyzer","Sav/DemandLogAnalyzer.html#method-i-toJson","()","<p>scan share count\n"],["toJson","Sav::SavDemand","Sav/SavDemand.html#method-i-toJson","()","<p>to json.\n"],["toJson","Sav::Trip","Sav/Trip.html#method-i-toJson","()","<p>to JSON\n"],["toJson","Sav::Util","Sav/Util.html#method-i-toJson","(obj)","<p>to JSON. <em>obj</em> : object to convert.\n"],["toJson","Sav::ViaPoint","Sav/ViaPoint.html#method-i-toJson","(mode = :simple)","<p>convert to Json.\n<p>mode  &mdash; if :simple, only show location. if :withTime, include arrived time. if\n:detail, …\n\n"],["toJson","Sumo::SumoMap","Sumo/SumoMap.html#method-i-toJson","()","<p>convert to JSON object (hash)\n"],["toJson","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-i-toJson","()","<p>convert to JSON object (hash)\n"],["toJson","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-toJson","()","<p>convert to JSON object (hash)\n"],["toJson","Sumo::SumoMap::Junction","Sumo/SumoMap/Junction.html#method-i-toJson","()","<p>convert to JSON object (hash)\n"],["toJson","Sumo::SumoMap::Lane","Sumo/SumoMap/Lane.html#method-i-toJson","()","<p>convert to JSON object (hash)\n"],["to_a","Sav::TentativeArray","Sav/TentativeArray.html#method-i-to_a","()","<p>to_a\n"],["to_s","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-to_s","()","<p>to_s\n"],["traciCom_Add","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-traciCom_Add","()","<p>create Add command\n"],["traciCom_Remove","Sumo::Traci::Poi","Sumo/Traci/Poi.html#method-i-traciCom_Remove","()","<p>description of method initialize\n<p>conf &mdash; configulation\n\n"],["transformLonLat2XY","Sumo::SumoMap","Sumo/SumoMap.html#method-i-transformLonLat2XY","(lonlat)","<p>transpormation of coordinate system from LonLat to X-Y\n<p>lonlat  &mdash; longitude and latitude in Geo2D::Point …\n"],["transformLonLat2XY","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-i-transformLonLat2XY","(lonlat)","<p>transpormation of coordinate system from LonLat to X-Y\n<p>lonlat  &mdash; longitude and latitude in Geo2D::Point …\n"],["transformXY2LonLat","Sumo::SumoMap","Sumo/SumoMap.html#method-i-transformXY2LonLat","(xyPos)","<p>transpormation of coordinate system from X-Y to LonLat\n<p>xyPos  &mdash; X-Y position in Geo2D::Point object\n<p>*return_ … &mdash; "],["transformXY2LonLat","Sumo::SumoMap::CoordSystem","Sumo/SumoMap/CoordSystem.html#method-i-transformXY2LonLat","(xyPos)","<p>transpormation of coordinate system from X-Y to LonLat\n<p>xyPos  &mdash; X-Y position in Geo2D::Point object\n<p>*return_ … &mdash; "],["updatePlannedDropOffTime","Sav::SavDemand","Sav/SavDemand.html#method-i-updatePlannedDropOffTime","(dropOffTime)","<p>update planned dropOff Time\n<p>dropOffTime  &mdash; dropOff time.\n<p>return &mdash; current planned time.\n"],["updatePlannedPickUpTime","Sav::SavDemand","Sav/SavDemand.html#method-i-updatePlannedPickUpTime","(pickUpTime)","<p>update planned pickUp Time\n<p>pickUpTime  &mdash; pickUpTime\n<p>return &mdash; current planned time.\n"],["updateTripPlannedTime","Sav::SavDemand","Sav/SavDemand.html#method-i-updateTripPlannedTime","(tripPlannedTime)","<p>update planned time\n<p>tripPlannedTime  &mdash; instance of Trip or [pickUpTime, dropOffTime]\n<p>return &mdash; current planned …\n"],["updateVehicleTableWhole","Sumo::Traci::VehicleManager","Sumo/Traci/VehicleManager.html#method-i-updateVehicleTableWhole","()","<p>update Vehicle Table. if new vehicle appear, create new Vehicle and add to\nthe table.\n<p>return  &mdash; list of …\n\n"],["validSpan","Sumo::SumoMap::Edge","Sumo/SumoMap/Edge.html#method-i-validSpan","(span)","<p>get valid span for stop the vehicle. if span is zero, increase it to\nMinSpanForStop. if MinSpanForStop …\n"],["vehicleList","Sumo::SumoManager","Sumo/SumoManager.html#method-i-vehicleList","()","<p>access utility to vehicle list\n"],["vehicleTable","Sumo::SumoManager","Sumo/SumoManager.html#method-i-vehicleTable","()","<p>access utility to vehicle list\n"],["waitTcpPortIsFree","Sumo::Util","Sumo/Util.html#method-i-waitTcpPortIsFree","(port, interval = 0.1)","<p>wait until TCP port is free\n<p>port &mdash; port number to check\n<p>interval &mdash; interval of sleep\n"],["waitTcpPortIsReady","Sumo::Util","Sumo/Util.html#method-i-waitTcpPortIsReady","(port, interval = 0.1)","<p>wait until TCP port is ready\n<p>port &mdash; port number to check\n<p>interval &mdash; interval of sleep\n"]]}}
#! /usr/bin/env ruby
## -*- mode: ruby -*-
## = converter from TraCIConstants.h to Ruby Constant
## Author:: Anonymous3
## Version:: 0.0 2014/06/28 Anonymous3
##
## === History
## * [2014/06/28]: Create This File.
## == Usage
## * ...

require 'optparse' ;
require 'ostruct' ;
require 'pp' ;

def $LOAD_PATH.addIfNeed(path)
  self.unshift(path) if(!self.include?(path)) ;
end

$LOAD_PATH.addIfNeed("~/lib/ruby");
$LOAD_PATH.addIfNeed(File.dirname(__FILE__));

require 'TraciClient.rb' ;

#------------------------------------------------------------------------
#++
$conf =
  OpenStruct.new({
                   :inFile => "#{Sumo::SumoSrcBase}/src/traci-server/TraCIConstants.h",
                   :outFile => "./TraciConstants.rb",
                 }) ;

#------------------------------------------------------------------------
#++
$op = OptionParser.new() {|op|
  op.banner = <<_END_
  Usage: #{$0} [Options]*
    Default Input/Output
      input: #{$conf.inFile}
      output: #{$conf.outFile}
_END_

  op.separator("Options:") ;
  op.set_summary_indent("") ;
  op.set_summary_width(60) ;
  sep = "\n\t\t" ;

  op.on("-i InFile", String, sep + "set input C++ header file.") {|file|
    $conf.inFile = file ;
  }
  op.on("-o OutFile", String, sep + "set output ruby file.") {|file|
    $conf.outFile = file ;
  }
  op.on_tail("--help", sep + "show this message.") { |h|
    puts(op)
    exit(1)
  }
}

$op.parse!(ARGV) ;
$restArg = ARGV ;
#p [:rest, ARGV], [:conf,$conf] ; 

#--######################################################################
#--######################################################################
#--######################################################################

$infile = $conf.inFile ;
$outfile = $conf.outFile ;

constList = {} ;
open($outfile,"w"){|ostrm|
  ostrm << "## This file is generated by #{$0}\n"
  ostrm << "## at #{Time.now()}\n"
  ostrm << "## from #{$infile} .\n"

  ostrm << "module Sumo\n" ;
  ostrm << "  module Traci\n" ;
  ostrm << "    ## Constant table defined in SUMO's source.\n" ;
  ostrm << "    Constant = {} ;\n" ;
  indent = "    " ;

  open($infile,"r"){|istrm|
    while(line = istrm.gets())
      if(line =~ /\#define\s+([^\s]+)\s+(.*)$/) then
        constName = $1 ;
        constVal = $2 ;
        if(constVal == "") then
          constVal = "nil" ;
        elsif(constVal =~ /\.\s*$/) then ## if the value ends by period,
          constVal += "0" ;
#        elsif(constVal =~ /^[\.0-9]+$/) then # use the original notation
#          constVal = constVal.to_i ;
#        elsif (constVal =~ /^0[xX][0-9a-fA-F]+$/) then # use the original notation
#          constVal = constVal.hex ;
        end
        ostrm << indent ;
        ostrm << "Constant[#{constName.inspect}] = #{constVal} ;\n" ;
      elsif(line =~ /^\/\//) then
        ostrm << indent << '##' << line ;
      elsif(line =~ /^\s*$/) then
#        ostrm << line ;
      end
    end
  }
  
  ostrm << "  end \# module Traci\n" ;
  ostrm << "end \# module Sumo\n" ;
}

